// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WEB.Models;

#nullable disable

namespace WEB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230628141542_SimplePermissionsMode")]
    partial class SimplePermissionsMode
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("WEB.Models.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId", "QuestionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Answers_ResponseId_QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("WEB.Models.AnswerOption", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnswerId", "QuestionOptionId")
                        .HasName("PK_AnswerOption");

                    b.HasIndex("QuestionOptionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("WEB.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WEB.Models.Component", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundColour")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ComponentType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("TextColour")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("ComponentId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Component_Code");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("WEB.Models.ComponentIndicator", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComponentId", "IndicatorId")
                        .HasName("PK_ComponentIndicator");

                    b.HasIndex("IndicatorId");

                    b.ToTable("ComponentIndicators");
                });

            modelBuilder.Entity("WEB.Models.DataReview", b =>
                {
                    b.Property<Guid>("DataReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("Date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewResult")
                        .HasColumnType("int");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DataReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DataReviews");
                });

            modelBuilder.Entity("WEB.Models.DataReviewLink", b =>
                {
                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndicatorId", "EntityId", "DateId", "DataReviewId")
                        .HasName("PK_DataReviewLink");

                    b.HasIndex("DataReviewId");

                    b.ToTable("DataReviewLinks");
                });

            modelBuilder.Entity("WEB.Models.Date", b =>
                {
                    b.Property<Guid>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("DateType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("OpenFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("OpenTo")
                        .HasColumnType("Date");

                    b.Property<Guid?>("QuarterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DateId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Date_Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Date_Name");

                    b.HasIndex("QuarterId");

                    b.HasIndex("YearId");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("WEB.Models.Datum", b =>
                {
                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Aggregated")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ApproveDataReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<Guid>("LastSavedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastSavedDateUtc")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RejectDataReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Rejected")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<Guid?>("SubmitDataReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Submitted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<Guid?>("VerifyDataReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndicatorId", "EntityId", "DateId")
                        .HasName("PK_Datum");

                    b.HasIndex("ApproveDataReviewId");

                    b.HasIndex("DateId");

                    b.HasIndex("EntityId");

                    b.HasIndex("LastSavedById");

                    b.HasIndex("RejectDataReviewId");

                    b.HasIndex("SubmitDataReviewId");

                    b.HasIndex("VerifyDataReviewId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("WEB.Models.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileContents")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid?>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("DocumentId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WEB.Models.Entity", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityId");

                    b.HasIndex("Code")
                        .HasDatabaseName("IX_Entity_Code");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("OrganisationId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Entity_Name")
                        .HasFilter("[OrganisationId] IS NOT NULL");

                    b.HasIndex("OrganisationId", "ShortName")
                        .IsUnique()
                        .HasDatabaseName("IX_Entity_ShortName")
                        .HasFilter("[OrganisationId] IS NOT NULL");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("WEB.Models.EntityLink", b =>
                {
                    b.Property<Guid>("ChildEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChildEntityId", "ParentEntityId")
                        .HasName("PK_EntityLink");

                    b.HasIndex("ParentEntityId");

                    b.ToTable("EntityLinks");
                });

            modelBuilder.Entity("WEB.Models.EntityPermission", b =>
                {
                    b.Property<Guid>("EntityPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityPermissionId");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("EntityPermissions");
                });

            modelBuilder.Entity("WEB.Models.EntityType", b =>
                {
                    b.Property<Guid>("EntityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Plural")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("EntityTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_EntityType_Name");

                    b.HasIndex("Plural")
                        .IsUnique()
                        .HasDatabaseName("IX_EntityType_Plural");

                    b.ToTable("EntityTypes");
                });

            modelBuilder.Entity("WEB.Models.Error", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Form")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Message")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Method")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ExceptionId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("WEB.Models.ErrorException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InnerExceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("InnerExceptionId");

                    b.ToTable("Exceptions");
                });

            modelBuilder.Entity("WEB.Models.Field", b =>
                {
                    b.Property<Guid>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Component")
                        .HasColumnType("bit");

                    b.Property<bool>("Entity")
                        .HasColumnType("bit");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<bool>("Folder")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Indicator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<short?>("MaxLength")
                        .HasColumnType("smallint");

                    b.Property<short?>("MinLength")
                        .HasColumnType("smallint");

                    b.Property<bool>("MultiLine")
                        .HasColumnType("bit");

                    b.Property<bool>("Multiple")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Organisation")
                        .HasColumnType("bit");

                    b.Property<bool>("RadioCheckbox")
                        .HasColumnType("bit");

                    b.Property<string>("RegEx")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Relationship")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<short>("Rows")
                        .HasColumnType("smallint");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("FieldId");

                    b.HasIndex("GroupId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Field_Name");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("WEB.Models.FieldValue", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId", "FieldId")
                        .HasName("PK_FieldValue");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldValues");
                });

            modelBuilder.Entity("WEB.Models.Folder", b =>
                {
                    b.Property<Guid>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RootFolder")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.HasKey("FolderId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("WEB.Models.FolderContent", b =>
                {
                    b.Property<Guid>("FolderContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("FolderContentId");

                    b.HasIndex("AddedById");

                    b.HasIndex("FolderId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_FolderContent_Name");

                    b.ToTable("FolderContents");
                });

            modelBuilder.Entity("WEB.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Group_Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WEB.Models.Indicator", b =>
                {
                    b.Property<Guid>("IndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<int>("DateAggregationType")
                        .HasColumnType("int");

                    b.Property<byte>("DecimalPlaces")
                        .HasColumnType("tinyint");

                    b.Property<bool>("DisableNote")
                        .HasColumnType("bit");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorStatus")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorType")
                        .HasColumnType("int");

                    b.Property<Guid>("LastSavedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastSavedDateUtc")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("RequiresApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresSubmit")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresVerify")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IndicatorId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Indicator_Code");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Indicator_Name");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("WEB.Models.IndicatorPermission", b =>
                {
                    b.Property<Guid>("IndicatorPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approve")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Submit")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Verify")
                        .HasColumnType("bit");

                    b.HasKey("IndicatorPermissionId");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("UserId");

                    b.ToTable("IndicatorPermissions");
                });

            modelBuilder.Entity("WEB.Models.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WEB.Models.LogFrame", b =>
                {
                    b.Property<Guid>("LogFrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LogFrameId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_LogFrame_Name");

                    b.ToTable("LogFrames");
                });

            modelBuilder.Entity("WEB.Models.LogFrameRow", b =>
                {
                    b.Property<Guid>("LogFrameRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indicators")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LogFrameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeansOfVerification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RisksAndAssumptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("RowType")
                        .HasColumnType("int");

                    b.HasKey("LogFrameRowId");

                    b.HasIndex("LogFrameId");

                    b.ToTable("LogFrameRows");
                });

            modelBuilder.Entity("WEB.Models.LogFrameRowComponent", b =>
                {
                    b.Property<Guid>("LogFrameRowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogFrameRowId", "ComponentId")
                        .HasName("PK_LogFrameRowComponent");

                    b.HasIndex("ComponentId");

                    b.ToTable("LogFrameRowComponents");
                });

            modelBuilder.Entity("WEB.Models.LogFrameRowIndicator", b =>
                {
                    b.Property<Guid>("LogFrameRowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogFrameRowId", "IndicatorId")
                        .HasName("PK_LogFrameRowIndicator");

                    b.HasIndex("IndicatorId");

                    b.ToTable("LogFrameRowIndicators");
                });

            modelBuilder.Entity("WEB.Models.Milestone", b =>
                {
                    b.Property<Guid>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colour")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("MilestoneId");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Milestone_Name");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("WEB.Models.Option", b =>
                {
                    b.Property<Guid>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("FieldId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Option_Name");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("WEB.Models.OptionValue", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId", "OptionId")
                        .HasName("PK_OptionValue");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionValues");
                });

            modelBuilder.Entity("WEB.Models.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrganisationId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Organisation_Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Organisation_Name");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("WEB.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colour")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ProjectId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Project_Name");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WEB.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CheckQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("MaximumDocuments")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinimumDocuments")
                        .HasColumnType("tinyint");

                    b.Property<int?>("OptionListType")
                        .HasColumnType("int");

                    b.Property<Guid?>("QuestionOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SkipLogicAction")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("CheckQuestionId");

                    b.HasIndex("QuestionOptionGroupId");

                    b.HasIndex("SectionId", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Question_Code");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("WEB.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("QuestionOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionOptionGroupId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("WEB.Models.QuestionOptionGroup", b =>
                {
                    b.Property<Guid>("QuestionOptionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Shared")
                        .HasColumnType("bit");

                    b.HasKey("QuestionOptionGroupId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_QuestionOptionGroup_Name");

                    b.ToTable("QuestionOptionGroups");
                });

            modelBuilder.Entity("WEB.Models.QuestionSummary", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId", "DateId")
                        .HasName("PK_QuestionSummary");

                    b.HasIndex("DateId");

                    b.ToTable("QuestionSummaries");
                });

            modelBuilder.Entity("WEB.Models.Questionnaire", b =>
                {
                    b.Property<Guid>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("bit");

                    b.Property<bool>("CalculateProgress")
                        .HasColumnType("bit");

                    b.Property<string>("CompletionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DateType")
                        .HasColumnType("int");

                    b.Property<Guid?>("DefaultDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DisplayQuestionCode")
                        .HasColumnType("bit");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PublicCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ShowSections")
                        .HasColumnType("bit");

                    b.Property<bool>("SubmitOnCompletion")
                        .HasColumnType("bit");

                    b.Property<bool>("UseSubmit")
                        .HasColumnType("bit");

                    b.HasKey("QuestionnaireId");

                    b.HasIndex("DefaultDateId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Questionnaire_Name");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("WEB.Models.Relationship", b =>
                {
                    b.Property<Guid>("RelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SourceComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TheoryOfChangeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RelationshipId");

                    b.HasIndex("SourceComponentId");

                    b.HasIndex("TargetComponentId");

                    b.HasIndex("TheoryOfChangeId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("WEB.Models.Response", b =>
                {
                    b.Property<Guid>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicableQuestions")
                        .HasColumnType("int");

                    b.Property<int>("CompletedQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("DateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastAnsweredOnUtc")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("OpenFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("OpenTo")
                        .HasColumnType("Date");

                    b.Property<string>("PublicCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Submitted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit");

                    b.Property<Guid?>("SubmittedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedOnUtc")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.HasKey("ResponseId");

                    b.HasIndex("DateId");

                    b.HasIndex("EntityId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("SubmittedById");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("WEB.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WEB.Models.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanNavigate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("QuestionnaireId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Section_Name");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("WEB.Models.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatGPTAPIKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("SetupCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("SimplePermissionsMode")
                        .HasColumnType("bit");

                    b.Property<bool>("UseApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("UseReject")
                        .HasColumnType("bit");

                    b.Property<bool>("UseSubmit")
                        .HasColumnType("bit");

                    b.Property<bool>("UseVerify")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("WEB.Models.SkipLogicOption", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CheckQuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId", "CheckQuestionOptionId")
                        .HasName("PK_SkipLogicOption");

                    b.HasIndex("CheckQuestionOptionId");

                    b.ToTable("SkipLogicOptions");
                });

            modelBuilder.Entity("WEB.Models.Subcategory", b =>
                {
                    b.Property<Guid>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("DataEntrySubtotal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("SubcategoryId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Subcategory_Code");

                    b.HasIndex("CategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Subcategory_Name");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("WEB.Models.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colour")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("Date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("PercentCompleted")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("TaskId");

                    b.HasIndex("MilestoneId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Task_Name");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("WEB.Models.TheoryOfChange", b =>
                {
                    b.Property<Guid>("TheoryOfChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TheoryOfChangeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_TheoryOfChange_Name");

                    b.ToTable("TheoriesOfChange");
                });

            modelBuilder.Entity("WEB.Models.TheoryOfChangeComponent", b =>
                {
                    b.Property<Guid>("TheoryOfChangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TheoryOfChangeId", "ComponentId")
                        .HasName("PK_TheoryOfChangeComponent");

                    b.HasIndex("ComponentId");

                    b.ToTable("TheoryOfChangeComponents");
                });

            modelBuilder.Entity("WEB.Models.Token", b =>
                {
                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("TokenNumber")
                        .HasColumnType("smallint");

                    b.Property<bool?>("ConvertNullToZero")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Number")
                        .HasColumnType("decimal(20, 8)");

                    b.Property<int?>("OperatorType")
                        .HasColumnType("int");

                    b.Property<int?>("ParenthesisType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SourceIndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TokenType")
                        .HasColumnType("int");

                    b.HasKey("IndicatorId", "TokenNumber")
                        .HasName("PK_Token");

                    b.HasIndex("SourceIndicatorId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("WEB.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AffiliatedEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DashboardSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AffiliatedEntityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganisationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WEB.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WEB.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WEB.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WEB.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WEB.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("WEB.Models.Answer", b =>
                {
                    b.HasOne("WEB.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Response", "Response")
                        .WithMany("Answers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("WEB.Models.AnswerOption", b =>
                {
                    b.HasOne("WEB.Models.Answer", "Answer")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.QuestionOption", "QuestionOption")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("QuestionOption");
                });

            modelBuilder.Entity("WEB.Models.ComponentIndicator", b =>
                {
                    b.HasOne("WEB.Models.Component", "Component")
                        .WithMany("ComponentIndicators")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Indicator", "Indicator")
                        .WithMany("ComponentIndicators")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("WEB.Models.DataReview", b =>
                {
                    b.HasOne("WEB.Models.User", "User")
                        .WithMany("DataReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEB.Models.DataReviewLink", b =>
                {
                    b.HasOne("WEB.Models.DataReview", "DataReview")
                        .WithMany("DataReviewLinks")
                        .HasForeignKey("DataReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Datum", "Datum")
                        .WithMany("DataReviewLinks")
                        .HasForeignKey("IndicatorId", "EntityId", "DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataReview");

                    b.Navigation("Datum");
                });

            modelBuilder.Entity("WEB.Models.Date", b =>
                {
                    b.HasOne("WEB.Models.Date", "Quarter")
                        .WithMany("DatesInQuarter")
                        .HasForeignKey("QuarterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.Date", "Year")
                        .WithMany("DatesInYear")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Quarter");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("WEB.Models.Datum", b =>
                {
                    b.HasOne("WEB.Models.DataReview", "ApproveReview")
                        .WithMany("ApprovedData")
                        .HasForeignKey("ApproveDataReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.Date", "Date")
                        .WithMany("Data")
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Entity", "Entity")
                        .WithMany("Data")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Indicator", "Indicator")
                        .WithMany("Data")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.User", "LastSavedBy")
                        .WithMany("LastSavedData")
                        .HasForeignKey("LastSavedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.DataReview", "RejectReview")
                        .WithMany("RejectedData")
                        .HasForeignKey("RejectDataReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.DataReview", "SubmitReview")
                        .WithMany("SubmittedData")
                        .HasForeignKey("SubmitDataReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.DataReview", "VerifyReview")
                        .WithMany("VerifiedData")
                        .HasForeignKey("VerifyDataReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApproveReview");

                    b.Navigation("Date");

                    b.Navigation("Entity");

                    b.Navigation("Indicator");

                    b.Navigation("LastSavedBy");

                    b.Navigation("RejectReview");

                    b.Navigation("SubmitReview");

                    b.Navigation("VerifyReview");
                });

            modelBuilder.Entity("WEB.Models.Document", b =>
                {
                    b.HasOne("WEB.Models.Item", "Item")
                        .WithMany("Documents")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.User", "UploadedBy")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Item");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("WEB.Models.Entity", b =>
                {
                    b.HasOne("WEB.Models.EntityType", "EntityType")
                        .WithMany("Entities")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Organisation", "Organisation")
                        .WithMany("Entities")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EntityType");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("WEB.Models.EntityLink", b =>
                {
                    b.HasOne("WEB.Models.Entity", "ChildEntity")
                        .WithMany("ParentEntities")
                        .HasForeignKey("ChildEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Entity", "ParentEntity")
                        .WithMany("ChildEntities")
                        .HasForeignKey("ParentEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildEntity");

                    b.Navigation("ParentEntity");
                });

            modelBuilder.Entity("WEB.Models.EntityPermission", b =>
                {
                    b.HasOne("WEB.Models.Entity", "Entity")
                        .WithMany("EntityPermissions")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.User", "User")
                        .WithMany("EntityPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEB.Models.Error", b =>
                {
                    b.HasOne("WEB.Models.ErrorException", "Exception")
                        .WithMany()
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exception");
                });

            modelBuilder.Entity("WEB.Models.ErrorException", b =>
                {
                    b.HasOne("WEB.Models.ErrorException", "InnerException")
                        .WithMany()
                        .HasForeignKey("InnerExceptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InnerException");
                });

            modelBuilder.Entity("WEB.Models.Field", b =>
                {
                    b.HasOne("WEB.Models.Group", "Group")
                        .WithMany("Fields")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WEB.Models.FieldValue", b =>
                {
                    b.HasOne("WEB.Models.Field", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Item", "Item")
                        .WithMany("FieldValues")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("WEB.Models.Folder", b =>
                {
                    b.HasOne("WEB.Models.Folder", "ParentFolder")
                        .WithMany("Subfolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("WEB.Models.FolderContent", b =>
                {
                    b.HasOne("WEB.Models.User", "AddedBy")
                        .WithMany("AddedFolderContents")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Folder", "Folder")
                        .WithMany("FolderContents")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("WEB.Models.Indicator", b =>
                {
                    b.HasOne("WEB.Models.User", "CreatedBy")
                        .WithMany("CreatedIndicators")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.EntityType", "EntityType")
                        .WithMany("Indicators")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Subcategory", "Subcategory")
                        .WithMany("Indicators")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityType");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("WEB.Models.IndicatorPermission", b =>
                {
                    b.HasOne("WEB.Models.Indicator", "Indicator")
                        .WithMany("IndicatorPermissions")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.User", "User")
                        .WithMany("IndicatorPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEB.Models.LogFrameRow", b =>
                {
                    b.HasOne("WEB.Models.LogFrame", "LogFrame")
                        .WithMany("LogFrameRows")
                        .HasForeignKey("LogFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LogFrame");
                });

            modelBuilder.Entity("WEB.Models.LogFrameRowComponent", b =>
                {
                    b.HasOne("WEB.Models.Component", "Component")
                        .WithMany("LogFrameRowComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.LogFrameRow", "LogFrameRow")
                        .WithMany("LogFrameRowComponents")
                        .HasForeignKey("LogFrameRowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("LogFrameRow");
                });

            modelBuilder.Entity("WEB.Models.LogFrameRowIndicator", b =>
                {
                    b.HasOne("WEB.Models.Indicator", "Indicator")
                        .WithMany("LogFrameRowIndicators")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.LogFrameRow", "LogFrameRow")
                        .WithMany("LogFrameRowIndicators")
                        .HasForeignKey("LogFrameRowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("LogFrameRow");
                });

            modelBuilder.Entity("WEB.Models.Milestone", b =>
                {
                    b.HasOne("WEB.Models.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WEB.Models.Option", b =>
                {
                    b.HasOne("WEB.Models.Field", "Field")
                        .WithMany("Options")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("WEB.Models.OptionValue", b =>
                {
                    b.HasOne("WEB.Models.Item", "Item")
                        .WithMany("OptionValues")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Option", "Option")
                        .WithMany("OptionValues")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("WEB.Models.Question", b =>
                {
                    b.HasOne("WEB.Models.Question", "CheckQuestion")
                        .WithMany("SkipLogicQuestions")
                        .HasForeignKey("CheckQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.QuestionOptionGroup", "QuestionOptionGroup")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionOptionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckQuestion");

                    b.Navigation("QuestionOptionGroup");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("WEB.Models.QuestionOption", b =>
                {
                    b.HasOne("WEB.Models.QuestionOptionGroup", "QuestionOptionGroup")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionOptionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionOptionGroup");
                });

            modelBuilder.Entity("WEB.Models.QuestionSummary", b =>
                {
                    b.HasOne("WEB.Models.Date", "Date")
                        .WithMany("QuestionSummaries")
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Question", "Question")
                        .WithMany("QuestionSummaries")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Date");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WEB.Models.Questionnaire", b =>
                {
                    b.HasOne("WEB.Models.Date", "Date")
                        .WithMany("DefaultDateQuestionnaires")
                        .HasForeignKey("DefaultDateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.EntityType", "EntityType")
                        .WithMany("Questionnaires")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Date");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("WEB.Models.Relationship", b =>
                {
                    b.HasOne("WEB.Models.Component", "SourceComponent")
                        .WithMany("RelationshipsAsSource")
                        .HasForeignKey("SourceComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Component", "TargetComponent")
                        .WithMany("RelationshipsAsTarget")
                        .HasForeignKey("TargetComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.TheoryOfChange", "TheoryOfChange")
                        .WithMany("Relationships")
                        .HasForeignKey("TheoryOfChangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceComponent");

                    b.Navigation("TargetComponent");

                    b.Navigation("TheoryOfChange");
                });

            modelBuilder.Entity("WEB.Models.Response", b =>
                {
                    b.HasOne("WEB.Models.Date", "Date")
                        .WithMany("Responses")
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Entity", "Entity")
                        .WithMany("Responses")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Questionnaire", "Questionnaire")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.User", "SubmittedBy")
                        .WithMany("SubmittedResponses")
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Date");

                    b.Navigation("Entity");

                    b.Navigation("Questionnaire");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("WEB.Models.Section", b =>
                {
                    b.HasOne("WEB.Models.Questionnaire", "Questionnaire")
                        .WithMany("Sections")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("WEB.Models.SkipLogicOption", b =>
                {
                    b.HasOne("WEB.Models.QuestionOption", "QuestionOption")
                        .WithMany("SkipLogicOptions")
                        .HasForeignKey("CheckQuestionOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Question", "Question")
                        .WithMany("SkipLogicOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuestionOption");
                });

            modelBuilder.Entity("WEB.Models.Subcategory", b =>
                {
                    b.HasOne("WEB.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WEB.Models.Task", b =>
                {
                    b.HasOne("WEB.Models.Milestone", "Milestone")
                        .WithMany("Tasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("WEB.Models.TheoryOfChangeComponent", b =>
                {
                    b.HasOne("WEB.Models.Component", "Component")
                        .WithMany("TheoryOfChangeComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.TheoryOfChange", "TheoryOfChange")
                        .WithMany("TheoryOfChangeComponents")
                        .HasForeignKey("TheoryOfChangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("TheoryOfChange");
                });

            modelBuilder.Entity("WEB.Models.Token", b =>
                {
                    b.HasOne("WEB.Models.Indicator", "Indicator")
                        .WithMany("Tokens")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB.Models.Indicator", "SourceIndicator")
                        .WithMany("SourceTokens")
                        .HasForeignKey("SourceIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Indicator");

                    b.Navigation("SourceIndicator");
                });

            modelBuilder.Entity("WEB.Models.User", b =>
                {
                    b.HasOne("WEB.Models.Entity", "Entity")
                        .WithMany("AffiliatedUsers")
                        .HasForeignKey("AffiliatedEntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WEB.Models.Organisation", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Entity");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("WEB.Models.Answer", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("WEB.Models.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("WEB.Models.Component", b =>
                {
                    b.Navigation("ComponentIndicators");

                    b.Navigation("LogFrameRowComponents");

                    b.Navigation("RelationshipsAsSource");

                    b.Navigation("RelationshipsAsTarget");

                    b.Navigation("TheoryOfChangeComponents");
                });

            modelBuilder.Entity("WEB.Models.DataReview", b =>
                {
                    b.Navigation("ApprovedData");

                    b.Navigation("DataReviewLinks");

                    b.Navigation("RejectedData");

                    b.Navigation("SubmittedData");

                    b.Navigation("VerifiedData");
                });

            modelBuilder.Entity("WEB.Models.Date", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("DatesInQuarter");

                    b.Navigation("DatesInYear");

                    b.Navigation("DefaultDateQuestionnaires");

                    b.Navigation("QuestionSummaries");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("WEB.Models.Datum", b =>
                {
                    b.Navigation("DataReviewLinks");
                });

            modelBuilder.Entity("WEB.Models.Entity", b =>
                {
                    b.Navigation("AffiliatedUsers");

                    b.Navigation("ChildEntities");

                    b.Navigation("Data");

                    b.Navigation("EntityPermissions");

                    b.Navigation("ParentEntities");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("WEB.Models.EntityType", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("Indicators");

                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("WEB.Models.Field", b =>
                {
                    b.Navigation("FieldValues");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("WEB.Models.Folder", b =>
                {
                    b.Navigation("FolderContents");

                    b.Navigation("Subfolders");
                });

            modelBuilder.Entity("WEB.Models.Group", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("WEB.Models.Indicator", b =>
                {
                    b.Navigation("ComponentIndicators");

                    b.Navigation("Data");

                    b.Navigation("IndicatorPermissions");

                    b.Navigation("LogFrameRowIndicators");

                    b.Navigation("SourceTokens");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("WEB.Models.Item", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("FieldValues");

                    b.Navigation("OptionValues");
                });

            modelBuilder.Entity("WEB.Models.LogFrame", b =>
                {
                    b.Navigation("LogFrameRows");
                });

            modelBuilder.Entity("WEB.Models.LogFrameRow", b =>
                {
                    b.Navigation("LogFrameRowComponents");

                    b.Navigation("LogFrameRowIndicators");
                });

            modelBuilder.Entity("WEB.Models.Milestone", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WEB.Models.Option", b =>
                {
                    b.Navigation("OptionValues");
                });

            modelBuilder.Entity("WEB.Models.Organisation", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WEB.Models.Project", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("WEB.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionSummaries");

                    b.Navigation("SkipLogicOptions");

                    b.Navigation("SkipLogicQuestions");
                });

            modelBuilder.Entity("WEB.Models.QuestionOption", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("SkipLogicOptions");
                });

            modelBuilder.Entity("WEB.Models.QuestionOptionGroup", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WEB.Models.Questionnaire", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("WEB.Models.Response", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("WEB.Models.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WEB.Models.Subcategory", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("WEB.Models.TheoryOfChange", b =>
                {
                    b.Navigation("Relationships");

                    b.Navigation("TheoryOfChangeComponents");
                });

            modelBuilder.Entity("WEB.Models.User", b =>
                {
                    b.Navigation("AddedFolderContents");

                    b.Navigation("CreatedIndicators");

                    b.Navigation("DataReviews");

                    b.Navigation("EntityPermissions");

                    b.Navigation("IndicatorPermissions");

                    b.Navigation("LastSavedData");

                    b.Navigation("Roles");

                    b.Navigation("SubmittedResponses");

                    b.Navigation("UploadedDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
